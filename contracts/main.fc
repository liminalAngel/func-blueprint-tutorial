#include "imports/stdlib.fc";
#include "imports/params.fc";

const int min_tons_for_storage = 1000000000; 

;; recv_internal
;; 1. Update smc code
;; 2. Transfer messages to owner
;; 3. Deposit (simple send)
;; 4. Owner withdraw
;; 5. Change owner

;; recv_external
;; 1. Selfdestruct (burn smc)

(int, int, slice) load_data() inline_ref {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(32),
        ds~load_uint(256),
        ds~load_msg_addr()
    );
}

() store_data(int seqno, int public_key, slice owner_address) impure inline {
    set_data(
        begin_cell()
            .store_uint(seqno, 32)
            .store_uint(public_key, 256)
            .store_slice(owner_address)
        .end_cell()
    );
}

int get_smc_balance() method_id {
    [int balance, _] = get_balance();

    return balance;
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    if(in_msg_body.slice_empty?()) {
        return ();
    }

    (int seqno, int public_key, slice owner_address) = load_data();

    int op = in_msg_body~load_uint(32);  

    if(op == "deposit"c) {
        return ();
    }

    if(op == "transfer_msg_to_owner"c) {
        ifnot (equal_slices(sender_address, owner_address)) {
            cell msg_cell = begin_cell().store_slice(in_msg_body).end_cell();

            cell msg = begin_cell()
                .store_uint(0x18, 6) ;; nobounceable - 0x10, logs - 0x30
                .store_slice(owner_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_slice(sender_address)
                .store_ref(msg_cell)
            .end_cell();
        send_raw_message(msg, 64);
        }

        return ();
    }

    throw_unless(411, equal_slices(sender_address, owner_address));

    if(op == "change_owner"c) {
        slice new_owner_address = in_msg_body~load_msg_addr();

        force_chain(new_owner_address);

        store_data(seqno, public_key, new_owner_address);

        return ();
    }

    if(op == "withdraw_funds"c) {
        int withdraw_amount = in_msg_body~load_coins();

        throw_unless(412, get_smc_balance() >= withdraw_amount);

        int send_amount = min(withdraw_amount, my_balance - min_tons_for_storage);

        cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(owner_address)
                .store_coins(withdraw_amount)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, 1);

        return ();
    }

    if(op == "update_code"c) {
        cell new_code = in_msg_body~load_ref();
        set_code(new_code);

        cont old_code = get_c3();
        set_c3(new_code.begin_parse().bless());

        throw(0);
    }

    throw(0xffffff); ;; 0xfffffe - op not allowed

}

() recv_external(slice in_msg) impure {
    var signature = in_msg~load_bits(512);
    slice tmp_in_msg = in_msg;
    var hash = slice_hash(in_msg);

    (int seqno, int public_key, slice owner_address) = load_data();

    throw_unless(401, check_signature(hash, signature, public_key));

    int msg_seqno = tmp_in_msg~load_uint(32);

    throw_unless(402, msg_seqno == seqno);

    accept_message();
    tmp_in_msg~touch();

    int op = tmp_in_msg~load_uint(32);

    if(op == "selfdestruct"c) {
        cell msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(owner_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .end_cell();
        send_raw_message(msg, 128 + 32);
    }

    store_data(seqno + 1, public_key, owner_address);
}

int get_seqno() method_id {
    (int seqno, _, _) = load_data();
    return seqno;
}

slice get_owner() method_id {
    (_, _, slice owner_address) = load_data();
    return owner_address;
}
